general:
    common_entity_attributes:
        - name: oldEnt
          type: struct gentity_s*

messages:
    # Make all components export their networked state.
    PrepareNetCode:

    # Sent unconditionally once every frame.
    Think:
        - name: timeDelta
          type: int

    # ######################### #
    # Component-affine messages #
    # ######################### #
    # Every component can listen to them but few (and atleast one) will.
    # TODO: Define them inside their affine component's definition below.

    FreeAt:
        - name: freeTime
          type: int

    Ignite:
        - name: fireStarter
          type: gentity_t*

    Extinguish:
        - name: immunityTime
          type: int

    Heal:
        - name: amount
          type: float
        - name: source
          type: gentity_t*

    Damage:
        - name: amount
          type: float
        - name: source
          type: gentity_t*
        - name: location
          type: Util::optional<Vec3>
        - name: direction
          type: Util::optional<Vec3>
        - name: flags
          type: int
        - name: meansOfDeath
          type: meansOfDeath_t

    ApplyDamageModifier:
        - name: damage
          type: float&
        - name: location
          type: Util::optional<Vec3>
        - name: direction
          type: Util::optional<Vec3>
        - name: flags
          type: int
        - name: meansOfDeath
          type: meansOfDeath_t

components:
    DeferredFreeing:
        messages:
            - FreeAt

    Client:
        parameters:
            clientData: gclient_t*

    Ignitable:
        parameters:
            freeOnExtinguish: bool
        messages:
            - PrepareNetCode
            - Think
            - Ignite
            - Extinguish

    Health:
        parameters:
            maxHealth: float
        messages:
            - PrepareNetCode
            - Heal
            - Damage

    # TODO: Damage zones as parameter, removing the dependency on Client.
    # NOTE: The dependency on Client is symbolic for an actual dependency
    #       on gentity_t.client.
    Armor:
        messages:
            - ApplyDamageModifier
        requires:
            - Client

    # TODO: Depend on or turn into PhysicsComponent, which handles the mass as
    #       a parameter. This would get rid of the dependency on Client.
    # NOTE: The dependency on Client is symbolic for an actual dependency
    #       on gentity_t.client.
    Knockback:
        messages:
            - Damage
        requires:
            - Client

entities:
    ###################
    # Pseudo entities #
    ###################

    Empty:
        components:

    # A generic client entity, not spawned yet.
    # TODO: Evaluate if HealthComponent is needed.
    Client:
        components:
            Client:
            Health:
                maxHealth: 1

    ##################
    # Player classes #
    ##################

    Dretch:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    Mantis:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    Marauder:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    AdvMarauder:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    Dragoon:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    AdvDragoon:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    Tyrant:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    Granger:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    AdvGranger:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    NakedHuman:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    LightHuman:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    MediumHuman:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    HeavyHuman:
        components:
            Client:
            Health:
            Armor:
            Knockback:

    ##############
    # Buildables #
    ##############

    AcidTube:
        components:
            Ignitable:
                freeOnExtinguish: false
            Health:

    Barricade:
        components:
            Ignitable:
                freeOnExtinguish: false
            Health:

    Booster:
        components:
            Ignitable:
                freeOnExtinguish: false
            Health:

    Egg:
        components:
            Ignitable:
                freeOnExtinguish: false
            Health:

    Hive:
        components:
            Ignitable:
                freeOnExtinguish: false
            Health:

    Leech:
        components:
            Ignitable:
                freeOnExtinguish: false
            Health:

    Overmind:
        components:
            Ignitable:
                freeOnExtinguish: false
            Health:

    Spiker:
        components:
            Ignitable:
                freeOnExtinguish: false
            Health:

    Trapper:
        components:
            Ignitable:
                freeOnExtinguish: false
            Health:

    Armoury:
        components:
            Health:

    Drill:
        components:
            Health:

    Medipad:
        components:
            Health:

    MGTurret:
        components:
            Health:

    Reactor:
        components:
            Health:

    Repeater:
        components:
            Health:

    Rocketpod:
        components:
            Health:

    Telenode:
        components:
            Health:

    ############
    # Unsorted #
    ############

    Fire:
        components:
            Ignitable:
                freeOnExtinguish: true
            DeferredFreeing:

# vi:ts=4:et:ai
