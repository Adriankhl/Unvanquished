general:
    common_entity_attributes:
        - name: oldEnt
          type: struct gentity_s*

messages:
    # Make all components export their networked state
    PrepareNetCode:

    # Sent unconditionally once every frame
    Think:
        timeDelta: int

    #
    # Component-affine messages
    # Every component can listen to them but few (and atleast one) will
    # TODO: Define them inside their affine component's definition below
    #

    FreeAt:
        freeTime: int

    Ignite:
        fireStarter: struct gentity_s*

    Extinguish:
        immunityTime: int

components:
    DeferedFreeing:
        messages:
            - FreeAt

    Ignitable:
        parameters:
            alwaysOnFire: bool
        messages:
            - PrepareNetCode
            - Think
            - Ignite
            - Extinguish

entities:
    Empty:
        components:

    Fire:
        components:
            Ignitable:
                alwaysOnFire: "true"
            DeferedFreeing:

    AlienBuildable:
        components:
            Ignitable:
                alwaysOnFire: "false"

# vi:ts=4:et:ai
